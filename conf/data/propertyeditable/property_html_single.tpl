<!DOCTYPE html>
<html>
    <head>
        <title>Property Details - {$model->Autogenerated_SDF_ID}</title>
        <link rel="stylesheet" href="{$helper->GetAssetPath('common/css/bootstrap.min.css')}" />
        <link rel="stylesheet" href="{$helper->GetAssetPath('fa/css/font-awesome.min.css')}" />
        <script type="text/javascript" src="{$helper->GetAssetPath('common/js/jquery-1.10.2.min.js')}"></script>
        <script type="text/javascript" src="{$helper->GetAssetPath('common/js/moment.min.js')}"></script>
        <style type="text/css">
            .label-cell { font-weight: bolder; }
        </style>
        <script type="text/javascript">

            function getViewer() {
                if (typeof(opener) != 'undefined') //window.open()'d from Task Pane frame
                    return opener.parent.parent;
                else
                    return parent.parent;
            }

            function doAddComment() {
                var session = getViewer().GetMapFrame().GetSessionId();

                var properties = [];
                properties.push({ "Name": "ParcelID", "Value": $("#COMMENT_PARCELID").val() });
                properties.push({ "Name": "RecordedDate", "Value": moment().format("YYYY-MM-DD HH:mm:ss") });
                var editedFields = $("#comment .form-control");
                for (var i = 0; i < editedFields.length; i++) {
                    var inputEl = $(editedFields[i]);
                    properties.push({
                        "Name": inputEl.attr("name"),
                        "Value": inputEl.val()
                    });
                }
                var json = {
                    "FeatureSet": {
                        "SessionID": session,
                        "Features": {
                            "Feature": [
                                {
                                    "Property": properties
                                }
                            ]
                        }
                    }
                };

                $("#btnSaveComment").addClass("disabled");

                var updateUrl = "../comments/.json"; //Relative to $RESTROOT/data/property
                var promise = $.ajax({
                    method: "post",
                    url: updateUrl,
                    data: JSON.stringify(json),
                    success: onCommentAdded,
                    error: onCommentAddError
                });
            }
            
            /*
            function doAddComment() {
                var session = getViewer().GetMapFrame().GetSessionId();
                var xml = "<FeatureSet>";
                xml += "<SessionID>" + session + "</SessionID>";
                xml += "<Features><Feature>";
                xml += "<Property><Name>ParcelID</Name><Value>" + $("#COMMENT_PARCELID").val() + "</Value></Property>";
                xml += "<Property><Name>RecordedDate</Name><Value>" + moment().format("YYYY-MM-DD HH:mm:ss") + "</Value></Property>";
                var editedFields = $("#comment .form-control");
                for (var i = 0; i < editedFields.length; i++) {
                    var inputEl = $(editedFields[i]);
                    xml += "<Property><Name>" + inputEl.attr("name") + "</Name><Value>" + inputEl.val() + "</Value></Property>";
                }
                xml += "</Feature></Features></FeatureSet>";

                $("#btnSaveComment").addClass("disabled");

                var updateUrl = "../comments/.xml"; //Relative to $RESTROOT/data/property
                var promise = $.ajax({
                    method: "post",
                    url: updateUrl,
                    data: xml,
                    success: onCommentAdded,
                    error: onCommentAddError
                });
            }
            */
            
            function onCommentAddError(data, textStatus, jqXHR) {
                try {
                    var xml = data.responseXML;
                    var errNode = xml.getElementsByTagName("Error").item(0);
                    alert("Failed to add comment.\n\n" + errNode.textContent);
                } catch (e) {
                    if (data.status == 403)
                        alert("Failed to add comment. You have no permission to add comments");
                    else
                        alert("Failed to add comment");
                }
                $("#btnSaveComment").removeClass("disabled");
            }

            function onCommentAdded(data, textStatus, jqXHR) {
                alert("Comment added");
                $("#btnSaveComment").removeClass("disabled");
                var map = getViewer().GetMapFrame();
                map.Refresh();
                window.location.reload();
            }

            function doPropertyUpdate() {
                var session = getViewer().GetMapFrame().GetSessionId();
                var properties = [];
                var editedFields = $("#propDetails input.form-control[data-edited=true]");
                for (var i = 0; i < editedFields.length; i++) {
                    var inputEl = $(editedFields[i]);
                    properties.push({
                        "Name": inputEl.attr("name"),
                        "Value": inputEl.val()
                    });
                }
                var json = {
                    "UpdateOperation": {
                        "SessionID": session,
                        "Filter": "Autogenerated_SDF_ID = {$model->Autogenerated_SDF_ID}",
                        "UpdateProperties": {
                            "Property": properties
                        }
                    }
                };

                $("#btnSave").addClass("disabled");

                var updateUrl = window.location.href.replace(".html", ".json");
                var promise = $.ajax({
                    method: "post",
                    url: updateUrl,
                    data: JSON.stringify(json),
                    headers: {
                        "X-HTTP-Method-Override": "PUT"
                    },
                    success: onPropertyUpdated,
                    error: onPropertyUpdateError
                });
            }

            /*
            function doPropertyUpdate() {
                var session = getViewer().GetMapFrame().GetSessionId();
                var xml = "<UpdateOperation>";
                xml += "<SessionID>" + session + "</SessionID>";
                //xml += "<Filter>Autogenerated_SDF_ID = {$model->Autogenerated_SDF_ID}</Filter>";
                xml += "<UpdateProperties>";
                var editedFields = $("#propDetails input.form-control[data-edited=true]");
                for (var i = 0; i < editedFields.length; i++) {
                    var inputEl = $(editedFields[i]);
                    xml += "<Property><Name>" + inputEl.attr("name") + "</Name><Value>" + inputEl.val() + "</Value></Property>";
                }
                xml += "</UpdateProperties>";
                xml += "</UpdateOperation>";

                $("#btnSave").addClass("disabled");

                var updateUrl = window.location.href.replace(".html", ".xml");
                var promise = $.ajax({
                    method: "post",
                    url: updateUrl,
                    data: xml,
                    headers: {
                        "X-HTTP-Method-Override": "PUT"
                    },
                    success: onPropertyUpdated,
                    error: onPropertyUpdateError
                });
            }
            */

            function onPropertyUpdateError(data, textStatus, jqXHR) {
                try {
                    var xml = data.responseXML;
                    var errNode = xml.getElementsByTagName("Error").item(0);
                    alert("Failed to update property.\n\n" + errNode.textContent);
                } catch (e) {
                    if (data.status == 403)
                        alert("Failed to update property. You have no permission to update properties");
                    else
                        alert("Failed to update property");
                }
                $("#btnSave").removeClass("disabled");
            }

            function onPropertyUpdated(data, textStatus, jqXHR) {
                alert("Property Updated");
                $("#btnSave").removeClass("disabled");
                var map = getViewer().GetMapFrame();
                map.Refresh();
                window.location.reload();
            }

            function editGeometry() {
                var viewer = getViewer();
                var map = viewer.GetMapFrame();
                map.DigitizePolygon(function(poly) {
                    var pairs = [];
                    for (var i = 0; i < poly.Count; i++) {
                        var pt = poly.Point(i);
                        pairs.push(pt.X + " " + pt.Y);
                    }
                    var geomWkt = "POLYGON ((" + pairs.join(", ") + "))";
                    var geomEl = $("#SHPGEOM");
                    geomEl.val(geomWkt);
                    markFieldDirty(geomEl);
                });
            }

            function markFieldDirty(el) {
                var elId = el.attr("id");
                el.attr("data-edited", true);
                var label = $("label[for='" + elId + "']");
                var labelText = label.text();
                if (labelText.indexOf(" (edited)") <= 0) {
                    labelText += " (edited)";
                    label.text(labelText);
                }
            }

            function onFormFieldChanged(e) {
                var el = $(e.target);
                markFieldDirty(el);
            }

            $(document).ready(function() {
                $("#editGeometry").on("click", editGeometry);
                $("input.form-control").change(onFormFieldChanged);
                $("#btnSave").on("click", doPropertyUpdate);
                $("#btnSaveComment").on("click", doAddComment);
            });
        </script>
    </head>
    <body>
        <br/>
        <div class="container">
            <div class="row">
                <div class="col-md-7">
                    <div id="propDetails" class="panel panel-primary">
                        <div class="panel-heading">
                            Property Details - {$model->Autogenerated_SDF_ID}
                        </div>
                        <div class="panel-body">
                            <div class="form-group">
                                <label class="control-label" for="RLDESCR1">Description1</label>
                                <input type="text" class="form-control input-sm" id="RLDESCR1" name="RLDESCR1" value="{$model->RLDESCR1}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RLDESCR2">Description2</label>
                                <input type="text" class="form-control input-sm" id="RLDESCR2" name="RLDESCR2" value="{$model->RLDESCR2}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RLDESCR3">Description3</label>
                                <input type="text" class="form-control input-sm" id="RLDESCR3" name="RLDESCR3" value="{$model->RLDESCR3}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RPROPAD">Property Address</label>
                                <input type="text" class="form-control input-sm" id="RPROPAD" name="RPROPAD" value="{$model->RPROPAD}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RTYPE">Zone</label>
                                <input type="text" class="form-control input-sm" id="RTYPE" name="RTYPE" value="{$model->RTYPE}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RACRE">Acreage</label>
                                <input type="text" class="form-control input-sm" id="RACRE" name="RACRE" value="{$model->RACRE}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RLOT">Lot Dimensions</label>
                                <input type="text" class="form-control input-sm" id="RLOT" name="RLOT" value="{$model->RLOT}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RNAME">Owner</label>
                                <input type="text" class="form-control input-sm" id="RNAME" name="RNAME" value="{$model->RNAME}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RBILAD">Billing Address</label>
                                <input type="text" class="form-control input-sm" id="RBILAD" name="RBILAD" value="{$model->RBILAD}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="RSQFT">Lot Size (sqft)</label>
                                <input type="text" class="form-control input-sm" id="RSQFT" name="RSQFT" value="{$model->RSQFT}" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="SHPGEOM">Geometry (WKT)</label>
                                <div class="input-group">
                                    <input type="text" class="form-control input-sm" id="SHPGEOM" name="SHPGEOM" readonly="readonly" value="{$model->SHPGEOM}" />
                                    <span class="input-group-btn">
                                        <a title="Edit this geometry" class="btn btn-primary btn-sm btn-search" id="editGeometry"><i class="fa fa-edit"></i></a>
                                    </span>
                                </div>
                            </div>
                            <button id="btnSave" class="btn btn-success">Save Changes</button>
                        </div>
                    </div>
                </div>
                <div class="col-md-5">
                    <div class="panel panel-primary">
                        <div class="panel-heading">
                            Comments
                        </div>
                        <div class="panel-body">
                        {assign var=comments value=$related->GetRelation('ParcelComments')}
                        {if $comments->Next()}
                        {* NOTE: The lack of a do-while equivalent in smarty means we output the current record, and then do the while loop after *}
                        <div class="well">
                            <span class="pull-left">{$comments->Current()->Name}</span>
                            <span class="pull-right">{$comments->Current()->DateTimeAsType('RecordedDate', 'DateISO9601Full')}</span>
                            <hr/>
                            {$comments->Current()->Comment}
                        </div>
                        {while $comments->Next()}
                        <div class="well">
                            <span class="pull-left">{$comments->Current()->Name}</span>
                            <span class="pull-right">{$comments->Current()->DateTimeAsType('RecordedDate', 'DateISO9601Full')}</span>
                            <hr/>
                            {$comments->Current()->Comment}
                        </div>
                        {/while}
                        {else}
                        <div class="alert alert-danger">
                            <strong>There are no comments on this property</strong>
                        </div>
                        {/if}
                        </div>
                    </div>
                    <div id="comment" class="panel panel-primary">
                        <div class="panel-heading">
                            Add a comment
                        </div>
                        <div class="panel-body">
                            <input type="hidden" id="COMMENT_PARCELID" name="ParcelID" value="{$model->Autogenerated_SDF_ID}" />
                            <div class="form-group">
                                <label class="control-label" for="COMMENT_NAME">Name</label>
                                <input type="text" class="form-control input-sm" id="COMMENT_NAME" name="Name" value="" />
                            </div>
                            <div class="form-group">
                                <label class="control-label" for="COMMENT_TEXT">Comments</label>
                                <textarea class="form-control input-sm" id="COMMENT_TEXT" name="Comment"></textarea>
                            </div>
                            <button id="btnSaveComment" class="btn btn-success">Save Comment</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </body>
</html>
